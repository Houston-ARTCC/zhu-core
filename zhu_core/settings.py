"""
Django settings for zhu_core project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import sentry_sdk
from dotenv import load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Loads environment variables from .env file
load_dotenv(BASE_DIR / ".env")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEV_ENV", "") == "True"

# Initialize Sentry.io SDK for error handling
if not DEBUG and (dsn := os.getenv("SENTRY_DSN")):
    sentry_sdk.init(
        dsn=dsn,
        integrations=[DjangoIntegration()],
        traces_sample_rate=0.75,
        send_default_pii=True,
    )


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

SECURE_HSTS_SECONDS = not DEBUG

SECURE_SSL_REDIRECT = not DEBUG

SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG

SECURE_HSTS_PRELOAD = not DEBUG

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
]

if hosts := os.getenv("ALLOWED_HOSTS"):
    ALLOWED_HOSTS += hosts.split(",")


# Application definition

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    # Lets us use full ISO datetime strings for DateField forms
    "DATE_INPUT_FORMATS": [
        "iso-8601",
        "%Y-%m-%dT%H:%M:%S.%fZ",
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(weeks=1),
    "ROTATE_REFRESH_TOKENS": True,
    "UPDATE_LAST_LOGIN": True,
    "USER_ID_FIELD": "cid",
    "TOKEN_OBTAIN_SERIALIZER": "apps.vatsim.serializers.VatsimTokenObtainSerializer",
    "TOKEN_REFRESH_SERIALIZER": "apps.vatsim.serializers.VatsimTokenRefreshSerializer",
}

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "anymail",
    "auditlog",
    "corsheaders",
    "rest_framework",
    "rest_framework.authtoken",
    "apps.administration",
    "apps.announcements",
    "apps.calendar",
    "apps.connections",
    "apps.events.app.EventsConfig",
    "apps.feedback",
    "apps.loa",
    "apps.mailer",
    "apps.resources",
    "apps.tmu",
    "apps.training.app.TrainingConfig",
    "apps.users.app.UserConfig",
    "apps.vatsim",
    "apps.visit",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "zhu_core.middleware.JWTAuthenticationMiddleware",
    "auditlog.middleware.AuditlogMiddleware",
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

if origins := os.getenv("ALLOWED_ORIGINS"):
    CORS_ALLOWED_ORIGINS += origins.split(",")

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "cache-control",
    "x-csrftoken",
    "x-requested-with",
]

ROOT_URLCONF = "zhu_core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "emails/"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "zhu_core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "users.User"

VATSIM_CONNECT_URL = "https://auth-dev.vatsim.net" if DEBUG else "https://auth.vatsim.net"


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.getenv("STATIC_ROOT", str(BASE_DIR / "static"))

MEDIA_URL = "/media/"

MEDIA_ROOT = os.getenv("MEDIA_ROOT", str(BASE_DIR / "media"))


# Email configuration

EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")

if DEBUG:
    # Logs all emails to stdout for development.
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

EMAIL_HOST = os.getenv("EMAIL_HOST")

EMAIL_PORT = os.getenv("EMAIL_PORT")

EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")

EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS")

ANYMAIL = {
    "MAILGUN_API_KEY": os.getenv("MAILGUN_API_KEY"),
}


# Miscellaneous

BLEACH_ALLOWED_TAGS = [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "pre",
    "span",
    "img",
    "strong",
    "blockquote",
    "p",
    "a",
    "u",
    "s",
    "em",
    "br",
    "ul",
    "ol",
    "li",
]
